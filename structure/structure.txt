C Structure

Why use structure?
In C, there are cases where we need to store multiple attributes of an entity. 
It is not necessary that an entity has all the information of one type only. 
It can have different attributes of different data types. For example, an entity Student may have its name (string), 
roll number (int), marks (float). To store such type of information regarding an entity student, we have the following approaches:


Construct individual arrays for storing names, roll numbers, and marks.
Use a special data structure to store the collection of different data types.

------------------------------------------------------------------------------------------------
What is Structure?

Structure in c is a user-defined data type that enables us to store the collection of different data types. 
Each element of a structure is called a member. Structures ca; simulate the use of classes and templates as it can store various information

The ,struct keyword is used to define the structure. Let's see the syntax to define the structure in c.


-------------------------------------------------------------------------------------------------------
Declaring structure variable
We can declare a variable for the structure so that we can access the member of the structure easily. 
There are two ways to declare structure variable:

By struct keyword within main() function
By declaring a variable at the time of defining the structure.

//~using struct

struct employee
{
    int id;
    char name[20];
    float salary;
};
//~Here, struct is the keyword; employee is the name of the structure; id, name, and salary are the members or fields of the structure



------------------------------------------------------------------------------------------------------------------------------------------

Structure Padding in C
Structure padding is a concept in C that adds the one or more empty bytes between the memory addresses to align the data in memory.

Let's first understand the structure padding in C through a simple scenario which is given below:

Suppose we create a user-defined structure. When we create an object of this structure,
then the contiguous memory will be allocated to the structure members.

struct student  
{  
  char a; // 1 byte  
  char b; // 1 byte  
  int c; // 4 bytes   
}

In the above example, we have created a structure of type student. 
We have declared the object of this structure named as 'stud1'. 
After the creation of an object, a contiguous block of memory is allocated to its structure members. 
First, the memory will be allocated to the 'a' variable, then 'b' variable, and then 'c' variable.

What is the size of the struct student?
Now, we calculate the size of the struct student. We assume that the size of the int is 4 bytes, and the size of the char is 1 byte.

  
In the above case, when we calculate the size of the struct student, size comes to be 6 bytes. But this answer is wrong.
Now, we will understand why this answer is wrong? We need to understand the concept of structure padding.


Structure Padding
The processor does not read 1 byte at a time. It reads 1 word at a time.

What does the 1 word mean?

If we have a 32-bit processor, then the processor reads 4 bytes at a time, which means that 1 word is equal to 4 bytes.

1 word = 4 bytes  
If we have a 64-bit processor, then the processor reads 8 bytes at a time, which means that 1 word is equal to 8 bytes.

1 word = 8 bytes  
